pipeline {
    agent any
    
    environment {
        NODE_VERSION = '20.19.4'
        REMOTE_SERVER = '3.230.217.30'
        REMOTE_USER = 'ubuntu'
        REMOTE_CODE_PATH = '/var/www/html/Quiz/quiz_react'
        REMOTE_DEPLOY_PATH = '/var/www/html/Quiz/quiz_react/dist'
    }
    
    stages {
        stage('Copy Code from Remote Server') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'quiz-app-deploy-key', passwordVariable: 'SERVER_PASSWORD', usernameVariable: 'SERVER_USER')]) {
                    sh '''
                        # Install sshpass if not available
                        which sshpass || sudo apt-get update && sudo apt-get install -y sshpass
                        
                        # Clean workspace
                        rm -rf *
                        
                        # Copy source code from remote server to Jenkins
                        sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no -r $SERVER_USER@${REMOTE_SERVER}:${REMOTE_CODE_PATH}/* ./
                        
                        # Verify files copied
                        echo "Files copied to Jenkins workspace:"
                        ls -la
                    '''
                }
            }
        }
        
        stage('Setup Node.js') {
            steps {
                sh '''
                    export NVM_DIR="$HOME/.nvm"
                    if [ ! -s "$NVM_DIR/nvm.sh" ]; then
                        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
                    fi
                    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                    nvm install ${NODE_VERSION}
                    nvm use ${NODE_VERSION}
                    node --version
                    npm --version
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh '''
                    export NVM_DIR="$HOME/.nvm"
                    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                    nvm use ${NODE_VERSION}
                    npm cache clean --force
                    npm install
                '''
            }
        }
        
        stage('Build Application') {
            steps {
                sh '''
                    export NVM_DIR="$HOME/.nvm"
                    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                    nvm use ${NODE_VERSION}
                    npm run build
                    ls -la dist/
                '''
            }
        }
        
        stage('Deploy to Remote Server') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'quiz-app-deploy-key', passwordVariable: 'SERVER_PASSWORD', usernameVariable: 'SERVER_USER')]) {
                    sh '''
                        # Copy built files back to remote server
                        sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@${REMOTE_SERVER} "mkdir -p ~/temp_deploy"
                        sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no -r dist/* $SERVER_USER@${REMOTE_SERVER}:~/temp_deploy/
                        
                        # Deploy on remote server
                        sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@${REMOTE_SERVER} "
                            sudo cp -r ~/temp_deploy/* ${REMOTE_DEPLOY_PATH}/
                            sudo chown -R www-data:www-data ${REMOTE_DEPLOY_PATH}
                            sudo chmod -R 755 ${REMOTE_DEPLOY_PATH}
                            rm -rf ~/temp_deploy
                            sudo nginx -t && sudo systemctl reload nginx
                        "
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
